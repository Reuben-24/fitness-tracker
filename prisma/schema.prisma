generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model body_weights {
  id          Int      @id @default(autoincrement())
  user_id     Int
  weight_kg   Decimal  @db.Decimal(5, 2)
  recorded_at DateTime @default(now()) @db.Timestamp(6)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, recorded_at(sort: Desc)], map: "idx_body_weights_user_id_recorded_at")
}

model exercise_muscle_groups {
  exercise_id     Int
  muscle_group_id Int
  exercises       exercises     @relation(fields: [exercise_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  muscle_groups   muscle_groups @relation(fields: [muscle_group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([exercise_id, muscle_group_id])
  @@index([exercise_id], map: "idx_exercise_muscle_groups_exercise_id")
  @@index([muscle_group_id], map: "idx_exercise_muscle_groups_muscle_group_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model exercise_sets {
  id                  Int               @id @default(autoincrement())
  session_exercise_id Int
  set_number          Int
  reps                Int?
  weight              Decimal?          @db.Decimal(5, 2)
  completed           Boolean           @default(true)
  session_exercises   session_exercises @relation(fields: [session_exercise_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([session_exercise_id], map: "idx_exercise_sets_session_exercise_id")
}

model exercises {
  id                     Int                      @id @default(autoincrement())
  user_id                Int
  name                   String                   @db.VarChar(100)
  description            String?
  equipment              String?                  @db.VarChar(100)
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  exercise_muscle_groups exercise_muscle_groups[]
  users                  users                    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  session_exercises      session_exercises[]
  template_exercises     template_exercises[]

  @@unique([user_id, name])
}

model muscle_groups {
  id                     Int                      @id @default(autoincrement())
  user_id                Int
  name                   String                   @unique @db.VarChar(100)
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  exercise_muscle_groups exercise_muscle_groups[]
  users                  users                    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, name])
}

model refresh_tokens {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token_hash String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  expires_at DateTime? @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_refresh_tokens_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model session_exercises {
  id                 Int              @id @default(autoincrement())
  workout_session_id Int
  exercise_id        Int
  position           Int
  exercise_sets      exercise_sets[]
  exercises          exercises        @relation(fields: [exercise_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  workout_sessions   workout_sessions @relation(fields: [workout_session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([exercise_id], map: "idx_session_exercises_exercise_id")
  @@index([workout_session_id], map: "idx_session_exercises_session_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model template_exercises {
  id                  Int               @id @default(autoincrement())
  workout_template_id Int
  exercise_id         Int
  sets                Int
  reps                Int
  weight              Decimal?          @db.Decimal(5, 2)
  position            Int
  exercises           exercises         @relation(fields: [exercise_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  workout_templates   workout_templates @relation(fields: [workout_template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([workout_template_id, position])
  @@index([exercise_id], map: "idx_template_exercises_exercise_id")
  @@index([workout_template_id], map: "idx_template_exercises_template_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                Int                 @id @default(autoincrement())
  first_name        String              @db.VarChar(100)
  last_name         String              @db.VarChar(100)
  email             String              @unique @db.Citext
  password_hash     String
  birth_date        DateTime            @db.Date
  height_cm         Int
  gender            user_gender         @default(prefer_not_to_say)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  body_weights      body_weights[]
  exercises         exercises[]
  muscle_groups     muscle_groups[]
  refresh_tokens    refresh_tokens[]
  workout_sessions  workout_sessions[]
  workout_templates workout_templates[]
}

model workout_sessions {
  id                  Int                 @id @default(autoincrement())
  user_id             Int
  workout_template_id Int?
  started_at          DateTime?           @db.Timestamp(6)
  finished_at         DateTime?           @db.Timestamp(6)
  session_exercises   session_exercises[]
  users               users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  workout_templates   workout_templates?  @relation(fields: [workout_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([started_at], map: "idx_workout_sessions_started_at")
  @@index([user_id], map: "idx_workout_sessions_user_id")
}

model workout_templates {
  id                 Int                  @id @default(autoincrement())
  user_id            Int
  name               String               @db.VarChar(100)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  template_exercises template_exercises[]
  workout_sessions   workout_sessions[]
  users              users                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_workout_templates_user_id")
}

enum user_gender {
  male
  female
  non_binary        @map("non-binary")
  prefer_not_to_say @map("prefer not to say")
}
